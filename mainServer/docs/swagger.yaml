definitions:
  entities.Comment:
    properties:
      authorId:
        type: string
      content:
        type: string
      creationDate:
        type: string
      id:
        type: integer
      threadId:
        type: integer
    required:
    - authorId
    - content
    - creationDate
    type: object
  entities.User:
    properties:
      email:
        type: string
      name:
        type: string
      pwd:
        type: string
    type: object
  httperror.HTTPError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: status bad request
        type: string
    type: object
  models.ArticleCreationForm:
    properties:
      owners:
        items:
          type: string
        type: array
      title:
        type: string
    required:
    - owners
    - title
    type: object
  models.LoginForm:
    properties:
      email:
        type: string
      pwd:
        type: string
    required:
    - email
    - pwd
    type: object
  models.Request:
    properties:
      articleID:
        type: integer
      conflicted:
        type: boolean
      requestID:
        type: integer
      sourceHistoryID:
        type: string
      sourceVersionID:
        type: integer
      status:
        type: string
      targetHistoryID:
        type: string
      targetVersionID:
        type: integer
    type: object
  models.RequestCreationForm:
    properties:
      sourceVersionID:
        type: integer
      targetVersionID:
        type: integer
    required:
    - sourceVersionID
    - targetVersionID
    type: object
  models.RequestWithComparison:
    properties:
      after:
        type: string
      before:
        type: string
      request:
        $ref: '#/definitions/models.Request'
      source:
        $ref: '#/definitions/models.Version'
      target:
        $ref: '#/definitions/models.Version'
    type: object
  models.ReturnThreadIds:
    properties:
      CommentId:
        type: integer
      id:
        type: integer
      threadId:
        type: integer
    required:
    - CommentId
    - id
    - threadId
    type: object
  models.Thread:
    properties:
      articleId:
        type: integer
      comment:
        items:
          $ref: '#/definitions/entities.Comment'
        type: array
      id:
        type: integer
      specificId:
        type: integer
    required:
    - articleId
    - comment
    - specificId
    type: object
  models.Version:
    properties:
      articleID:
        type: integer
      content:
        type: string
      owners:
        items:
          type: string
        type: array
      status:
        type: string
      title:
        type: string
      versionID:
        type: integer
    type: object
  models.VersionCreationForm:
    properties:
      owners:
        items:
          type: string
        type: array
      sourceVersionID:
        type: integer
      title:
        type: string
    required:
    - owners
    - sourceVersionID
    - title
    type: object
host: localhost:8080
info:
  contact: {}
  description: Documentation of Alexandria's API. Endpoints can be tried out directly
    in this interactive documentation.
  title: API documentation
  version: 1.0.0
paths:
  /articles:
    post:
      consumes:
      - application/json
      description: Creates new article, including main article version. Returns main
        version info, excluding contents. Owners must be specified as email addresses,
        not usernames.
      parameters:
      - description: Article info
        in: body
        name: article
        required: true
        schema:
          $ref: '#/definitions/models.ArticleCreationForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Version'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperror.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperror.HTTPError'
      summary: Create new article
  /articles/:articleID/mainVersion:
    get:
      description: Get main version of an article by specifying the article id. Returns
        the version id of the main version
      produces:
      - application/json
      responses:
        "200":
          description: Success
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperror.HTTPError'
      summary: Get main version id of article
  /articles/:articleID/thread/:threadType/id/:specificID/:
    post:
      consumes:
      - application/json
      description: Creates thread entity, and specific thread entity. Returns id's
        of thread, specific thread and comment
      parameters:
      - description: Thread
        in: body
        name: thread
        required: true
        schema:
          $ref: '#/definitions/models.Thread'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ReturnThreadIds'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperror.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperror.HTTPError'
      summary: Creates thread entity
  /articles/{articleID}/requests:
    post:
      consumes:
      - application/json
      description: Creates request to merge one article versions' changes into another
      parameters:
      - description: Article ID
        in: path
        name: articleID
        required: true
        type: string
      - description: Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RequestCreationForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Request'
        "400":
          description: Invalid article ID or request creation data
        "500":
          description: Error creating request on server
      summary: Create request
  /articles/{articleID}/requests/{requestID}:
    get:
      consumes:
      - text/plain
      description: Returns the information of a given request, including the information
        of both versions. Note that comparing target and source versions directly,
        isn't reliable as before-and-after comparison. That's why, instead of filling
        in the contents of the version fields, a before and after string is included
        in the response.
      parameters:
      - description: Article ID
        in: path
        name: articleID
        required: true
        type: string
      - description: Request ID
        in: path
        name: requestID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RequestWithComparison'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperror.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperror.HTTPError'
      summary: Get Request
  /articles/{articleID}/requests/{requestID}/accept:
    put:
      consumes:
      - text/plain
      description: Accepts request to merge one article versions' changes into another.
        Updates target version and archives the request, by recording the current
        latest commits and setting its state to 'accepted'.
      parameters:
      - description: Article ID
        in: path
        name: articleID
        required: true
        type: string
      - description: Request ID
        in: path
        name: requestID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperror.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httperror.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperror.HTTPError'
      summary: Accepts request
  /articles/{articleID}/requests/{requestID}/reject:
    put:
      consumes:
      - text/plain
      description: Rejects request to merge one article versions' changes into another.
      parameters:
      - description: Article ID
        in: path
        name: articleID
        required: true
        type: string
      - description: Request ID
        in: path
        name: requestID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperror.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httperror.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperror.HTTPError'
      summary: Reject request
  /articles/{articleID}/versions:
    get:
      description: Gets all versions belonging to a specific article. Does not include
        version contents.
      parameters:
      - description: Article ID
        in: path
        name: articleID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Version'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperror.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperror.HTTPError'
      summary: List article versions
    post:
      consumes:
      - application/json
      description: Creates new version from an existing one of the same article
      parameters:
      - description: Article ID
        in: path
        name: articleID
        required: true
        type: string
      - description: Version info
        in: body
        name: version
        required: true
        schema:
          $ref: '#/definitions/models.VersionCreationForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Version'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperror.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httperror.HTTPError'
      summary: Create new version
  /articles/{articleID}/versions/{versionID}:
    get:
      description: Gets the version content + metadata from the database + filesystem.
        Must be accessible without being authenticated.
      parameters:
      - description: Article ID
        in: path
        name: articleID
        required: true
        type: string
      - description: Version ID
        in: path
        name: versionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Version'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperror.HTTPError'
      summary: Get version content + metadata
    post:
      consumes:
      - multipart/form-data
      description: Upload files to update an article version, can only be done by
        an owner. Requires multipart form data, with a file attached as the field
        "file"
      parameters:
      - description: Article ID
        in: path
        name: articleID
        required: true
        type: string
      - description: Version ID
        in: path
        name: versionID
        required: true
        type: string
      responses:
        "200":
          description: Success
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httperror.HTTPError'
      summary: Update article version
  /comments/thread/:threadID:
    post:
      consumes:
      - application/json
      description: Save all types (commit/request/review) of comments to the database
      parameters:
      - description: Comment
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/entities.Comment'
      - description: Thread ID
        in: path
        name: threadID
        required: true
        type: string
      responses:
        "200":
          description: Success
        "400":
          description: Bad request
        "500":
          description: failed saving comment
      summary: Save comment
  /createExampleUser:
    post:
      description: Creates a hardcoded user entity and adds it to the database, demonstrates
        how to add to database
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Temporary user creation endpoint
  /getExampleUser:
    get:
      description: Returns a user with a hardcoded email address, demonstrates how
        to use the services.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.User'
      summary: Get test user from database endpoint
  /login:
    post:
      consumes:
      - application/json
      description: Takes in user email and password from a JSON body, verifies if
        they are correct with the database and returns a JWT token
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginForm'
      responses:
        "200":
          description: Success
        "400":
          description: Invalid JSON provided
        "403":
          description: Invalid password
        "500":
          description: Could not create token
      summary: Endpoint for user logging in
  /users:
    post:
      consumes:
      - application/json
      description: Takes in user credentials from a JSON body, and makes sure they
        are securely stored in the database.
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/entities.User'
      responses:
        "200":
          description: Success
        "400":
          description: Invalid user JSON provided
        "403":
          description: Could not generate password hash
        "409":
          description: Could not save user to database
      summary: Endpoint for user registration
swagger: "2.0"
